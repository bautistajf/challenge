group = 'es.challenge'
version = '1.0.0'
sourceCompatibility = 11
ext['kotlin.version'] = '1.3.50'
ext['junit-jupiter.version'] = '5.7.0'

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3"
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.3"
}


bootJar {
    enabled = false
}


sonarqube {
    properties {
        property "sonar.coverage.exclusions", "**/annotations/**/*.*, **/ControllerHelper.java, **/mapper/**/*.*, **/utils/constants/**/*.*, **/observability/**/*.*"
        property "sonar.exclusions", "**/FlatJsonLayout.java, **/configuration/**/*.*, **/dto/**/*.*, **/entity/**/*.*, **/exception/**/*.*,"
    }
}

test {
    useJUnitPlatform()

    def jmockit = classpath.find { it.name.contains("jmockit") }
    if (jmockit != null) {
        jvmArgs "-javaagent:${jmockit.absolutePath}"
    }

    systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']

    println("Test configuration")
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }

    println("Runing ALL tests")

    test.finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=ERROR'
    ]
}
